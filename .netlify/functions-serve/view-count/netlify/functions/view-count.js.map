{
  "version": 3,
  "sources": ["../../../../OneDrive/Desktop/Portfolio/netlify/functions/view-count.js"],
  "sourceRoot": "C:/Users/rajpr/AppData/Local/Temp/tmp-8876-WHosUan1BJLf",
  "sourcesContent": ["import fs from 'fs';\r\nimport path from 'path';\r\n\r\n// Common CORS headers\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Headers': 'Content-Type',\r\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n};\r\n\r\nexport const handler = async function(event, context) {\r\n  // Handle CORS preflight\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers: corsHeaders,\r\n      body: 'OK',\r\n    };\r\n  }\r\n\r\n  // Path to the view count JSON file\r\n  // For Netlify deployment, we need to use a different path structure\r\n  let viewCountFilePath;\r\n  \r\n  // Debug logging\r\n  console.log('NETLIFY environment:', process.env.NETLIFY);\r\n  console.log('CONTEXT environment:', process.env.CONTEXT);\r\n  console.log('SITE_URL environment:', process.env.URL);\r\n  console.log('DEPLOY_URL environment:', process.env.DEPLOY_URL);\r\n  console.log('Current working directory:', process.cwd());\r\n  \r\n  // More robust Netlify detection\r\n  const isNetlify = process.env.NETLIFY === 'true' || \r\n                    process.env.CONTEXT === 'production' || \r\n                    process.env.CONTEXT === 'deploy-preview' ||\r\n                    process.env.URL?.includes('netlify.app') ||\r\n                    process.env.DEPLOY_URL?.includes('netlify.app');\r\n  \r\n  // Check if dist/server directory exists (Netlify deployment)\r\n  const distServerPath = path.join(process.cwd(), 'dist', 'server', 'viewCount.json');\r\n  const serverPath = path.join(process.cwd(), 'server', 'viewCount.json');\r\n  \r\n  if (isNetlify && fs.existsSync(distServerPath)) {\r\n    // Running on Netlify - use the dist/server directory\r\n    viewCountFilePath = distServerPath;\r\n    console.log('Using Netlify path:', viewCountFilePath);\r\n  } else if (fs.existsSync(serverPath)) {\r\n    // Running locally or Netlify CLI - use the server directory\r\n    viewCountFilePath = serverPath;\r\n    console.log('Using local path:', viewCountFilePath);\r\n  } else {\r\n    // Fallback: try to create the file if it doesn't exist\r\n    viewCountFilePath = distServerPath;\r\n    console.log('Using fallback path:', viewCountFilePath);\r\n    \r\n    // Create the file with initial data if it doesn't exist\r\n    if (!fs.existsSync(viewCountFilePath)) {\r\n      const initialData = {\r\n        totalViews: 100,\r\n        lastUpdated: new Date().toISOString()\r\n      };\r\n      fs.writeFileSync(viewCountFilePath, JSON.stringify(initialData, null, 2));\r\n      console.log('Created initial view count file');\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (event.httpMethod === 'GET') {\r\n      // Read and return the current view count\r\n      const data = fs.readFileSync(viewCountFilePath, 'utf8');\r\n      const viewCount = JSON.parse(data);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify(viewCount),\r\n      };\r\n    } else if (event.httpMethod === 'POST') {\r\n      // Increment the view count\r\n      const data = fs.readFileSync(viewCountFilePath, 'utf8');\r\n      const viewCount = JSON.parse(data);\r\n      viewCount.totalViews += 1;\r\n      viewCount.lastUpdated = new Date().toISOString();\r\n\r\n      fs.writeFileSync(viewCountFilePath, JSON.stringify(viewCount, null, 2));\r\n\r\n      return {\r\n        statusCode: 200,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ success: true, totalViews: viewCount.totalViews }),\r\n      };\r\n    } else {\r\n      return {\r\n        statusCode: 405,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ message: 'Method Not Allowed' }),\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling view count:', error);\r\n    \r\n    // Provide better error messages based on the type of error\r\n    let errorMessage = 'Failed to process view count request';\r\n    \r\n    if (error.code === 'ENOENT') {\r\n      errorMessage = 'View count data file not found. Please contact support.';\r\n    } else if (error instanceof SyntaxError) {\r\n      errorMessage = 'View count data is corrupted. Please contact support to reset the counter.';\r\n    } else if (error.code === 'EACCES') {\r\n      errorMessage = 'Permission denied accessing view count data.';\r\n    }\r\n    \r\n    // Return appropriate error response\r\n    if (event.httpMethod === 'GET' || event.httpMethod === 'POST') {\r\n      return {\r\n        statusCode: 500,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({\r\n          success: false,\r\n          message: errorMessage,\r\n          error: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n        }),\r\n      };\r\n    } else {\r\n      return {\r\n        statusCode: 405,\r\n        headers: corsHeaders,\r\n        body: JSON.stringify({ message: 'Method Not Allowed' }),\r\n      };\r\n    }\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["path", "fs"]
}
